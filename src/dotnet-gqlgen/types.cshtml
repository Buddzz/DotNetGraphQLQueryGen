@{
    DisableEncoding = true;
}
@using dotnet_gqlgen;

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using DotNetGqlClient;

/// <summary>
/// Generated interfaces for making GraphQL API calls with a typed interface.
///
/// Generated on @DateTime.Now from @Model.SchemaFile @Model.CmdArgs
/// </summary>

namespace @Model.Namespace
{

@foreach(var kvp in Model.Enums)
{
    @:public enum @kvp.Key {
    @foreach(var field in kvp.Value)
    {
        @:[GqlFieldName("@field.Name")]
        @:@field.DotNetName,
    }
    @:}
}

@foreach(var gqlType in Model.Types.Values)
{
    if (!string.IsNullOrEmpty(gqlType.Description))
    {
    @:/// <summary>
    @gqlType.DescriptionForComment(4)
    @:/// </summary>
    }
    if (gqlType.IsInput)
    {
    @:public class @gqlType.Name
    }
    else
    {
    @:public interface @gqlType.Name
    }
    @:{
@foreach(var field in gqlType.Fields)
{
    @if (field.ShouldBeProperty || gqlType.IsInput)
    {
        @if (!string.IsNullOrEmpty(field.Description))
        {
        @:/// <summary>
        @field.DescriptionForComment()
        @:/// </summary>
        }
        @:[GqlFieldName("@field.Name")]
        if (gqlType.IsInput)
        {
        @:public @field.DotNetType @field.DotNetName { get; set; }
        }
        else
        {
        @:@field.DotNetType @field.DotNetName { get; }
        }
    }
    else
    {
        var shortcutOutput = field.OutputMethodSignature(true, false);

        @if (gqlType != Model.Mutation && shortcutOutput != null)
        {
        @field.OutputMethodSignature(true, false)
        }

        @field.OutputMethodSignature(false, true)
    }
}
    @:}
}

}